<?xml version="1.0" encoding="UTF-8" ?>
<!--suppress ALL -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ziroom.tech.demeterapi.dao.mapper.DemeterAuthHistoryDao">
    <resultMap id="BaseResultMap" type="com.ziroom.tech.demeterapi.dao.entity.DemeterAuthHistory">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="user_task_id" property="userTaskId" jdbcType="BIGINT"/>
        <result column="auth_user" property="authUser" jdbcType="VARCHAR"/>
        <result column="auth_result" property="authResult" jdbcType="INTEGER"/>
        <result column="auth_opinion" property="authOpinion" jdbcType="VARCHAR"/>
        <result column="create_id" property="createId" jdbcType="VARCHAR"/>
        <result column="modify_id" property="modifyId" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, user_task_id, auth_user, auth_result, auth_opinion, create_id, modify_id, create_time, modify_time
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ziroom.tech.demeterapi.dao.entity.DemeterAuthHistoryExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        FROM demeter_auth_history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM demeter_auth_history
        WHERE id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM demeter_auth_history
        WHERE id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.ziroom.tech.demeterapi.dao.entity.DemeterAuthHistory">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO demeter_auth_history (user_task_id, auth_user, auth_result, auth_opinion, create_id, modify_id, create_time, 
            modify_time)
        VALUES (#{userTaskId,jdbcType=BIGINT}, #{authUser,jdbcType=VARCHAR}, #{authResult,jdbcType=INTEGER}, #{authOpinion,jdbcType=VARCHAR}, #{createId,jdbcType=VARCHAR}, #{modifyId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
            #{modifyTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.ziroom.tech.demeterapi.dao.entity.DemeterAuthHistory">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO demeter_auth_history
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userTaskId != null">
                user_task_id,
            </if>
            <if test="authUser != null">
                auth_user,
            </if>
            <if test="authResult != null">
                auth_result,
            </if>
            <if test="authOpinion != null">
                auth_opinion,
            </if>
            <if test="createId != null">
                create_id,
            </if>
            <if test="modifyId != null">
                modify_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="modifyTime != null">
                modify_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userTaskId != null">
                #{userTaskId,jdbcType=BIGINT},
            </if>
            <if test="authUser != null">
                #{authUser,jdbcType=VARCHAR},
            </if>
            <if test="authResult != null">
                #{authResult,jdbcType=INTEGER},
            </if>
            <if test="authOpinion != null">
                #{authOpinion,jdbcType=VARCHAR},
            </if>
            <if test="createId != null">
                #{createId,jdbcType=VARCHAR},
            </if>
            <if test="modifyId != null">
                #{modifyId,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyTime != null">
                #{modifyTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.ziroom.tech.demeterapi.dao.entity.DemeterAuthHistoryExample" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM demeter_auth_history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        UPDATE demeter_auth_history
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.userTaskId != null">
                user_task_id = #{record.userTaskId,jdbcType=BIGINT},
            </if>
            <if test="record.authUser != null">
                auth_user = #{record.authUser,jdbcType=VARCHAR},
            </if>
            <if test="record.authResult != null">
                auth_result = #{record.authResult,jdbcType=INTEGER},
            </if>
            <if test="record.authOpinion != null">
                auth_opinion = #{record.authOpinion,jdbcType=VARCHAR},
            </if>
            <if test="record.createId != null">
                create_id = #{record.createId,jdbcType=VARCHAR},
            </if>
            <if test="record.modifyId != null">
                modify_id = #{record.modifyId,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.modifyTime != null">
                modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        UPDATE demeter_auth_history
        SET id = #{record.id,jdbcType=BIGINT},
            user_task_id = #{record.userTaskId,jdbcType=BIGINT},
            auth_user = #{record.authUser,jdbcType=VARCHAR},
            auth_result = #{record.authResult,jdbcType=INTEGER},
            auth_opinion = #{record.authOpinion,jdbcType=VARCHAR},
            create_id = #{record.createId,jdbcType=VARCHAR},
            modify_id = #{record.modifyId,jdbcType=VARCHAR},
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
            modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.ziroom.tech.demeterapi.dao.entity.DemeterAuthHistory">
        UPDATE demeter_auth_history
        <set>
            <if test="userTaskId != null">
                user_task_id = #{userTaskId,jdbcType=BIGINT},
            </if>
            <if test="authUser != null">
                auth_user = #{authUser,jdbcType=VARCHAR},
            </if>
            <if test="authResult != null">
                auth_result = #{authResult,jdbcType=INTEGER},
            </if>
            <if test="authOpinion != null">
                auth_opinion = #{authOpinion,jdbcType=VARCHAR},
            </if>
            <if test="createId != null">
                create_id = #{createId,jdbcType=VARCHAR},
            </if>
            <if test="modifyId != null">
                modify_id = #{modifyId,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        WHERE id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ziroom.tech.demeterapi.dao.entity.DemeterAuthHistory">
        UPDATE demeter_auth_history
        SET user_task_id = #{userTaskId,jdbcType=BIGINT},
            auth_user = #{authUser,jdbcType=VARCHAR},
            auth_result = #{authResult,jdbcType=INTEGER},
            auth_opinion = #{authOpinion,jdbcType=VARCHAR},
            create_id = #{createId,jdbcType=VARCHAR},
            modify_id = #{modifyId,jdbcType=VARCHAR},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            modify_time = #{modifyTime,jdbcType=TIMESTAMP}
        WHERE id = #{id,jdbcType=BIGINT}
    </update>
</mapper>